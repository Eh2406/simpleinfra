---

- name: install deps
  apt:
    name:
      - pkg-config
      - build-essential
      - libssl-dev
      - python3-pip
      - python3-jwt
      - python3-cryptography
    state: present

- name: install rustup in userspace for root
  shell: |
    set -eu
    RUSTUP_VERSION=1.24.3
    RUSTUP_SHA="a3cb081f88a6789d104518b30d4aa410009cd08c3822a1226991d6cf0442a0f8"
    curl --proto '=https' --tlsv1.2 -sSf -O \
      https://raw.githubusercontent.com/rust-lang/rustup/${RUSTUP_VERSION}/rustup-init.sh
    echo "${RUSTUP_SHA}  rustup-init.sh" | sha256sum --check --
    sh rustup-init.sh --default-toolchain nightly -y --component rust-src

- name: Configure update script service
  copy:
    src: team_login/
    dest: "{{ vars_team_login_path }}"

- name: Build team login cron job
  shell: "cd {{ vars_team_login_path }} && PATH=$PATH:$HOME/.cargo/bin cargo build"

- name: Enable message of the day
  template:
    src: motd_sshd_config
    dest: /etc/ssh/sshd_config.d/motd

- name: Find all existing motd scripts
  find:
    paths: /etc/update-motd.d/
    patterns: "*"
  register: files_to_delete

- name: Disable automatically generated message of the day
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: stop and disable news service
  service:
    name: "motd-news"
    state: stopped

- name: Stop and disable news service timer
  ansible.builtin.systemd:
    name: motd-news.timer
    state: stopped
    enabled: no

- name: Set up message of the day
  template:
    src: motd_rules
    dest: /etc/motd

- name: Install the team login binary
  shell: "cp {{ vars_team_login_path }}/target/debug/team_login /etc/cron.team_login"

- name: Set up the team login cron job
  template:
    src: crontab_append
    dest: /etc/cron.d/team_login
  # if the cron job is running right now, keep retrying until it finishes
  register: task_result
  until: task_result is not failed
  retries: 10
  delay: 5

- name: Set up the files that initially appear in a user's home dir
  copy:
    src: skel/
    dest: /etc/skel/

- name: Set up the convenience files for managing worktrees
  copy:
    src: scripts/
    dest: /usr/local/bin/
    mode: a+x

- name: install common tooling
  apt:
    name:
      - build-essential
      - cmake
      - python3
      - python-is-python3
      - clang
      - llvm
      - valgrind
      - ninja-build
      - gcc-multilib # for 32 bit cross compiles of libstd and tests
    state: present

- name: Set up the git credential helper user
  user:
    name: github-app-credentials
    state: present

- name: Upload git-credential-dev-desktop-inner
  copy:
    src: git-credential-dev-desktop-inner
    dest: /usr/local/bin/git-credential-dev-desktop-inner
    owner: root
    group: github-app-credentials
    mode: 0750

- name: Upload git-credential-dev-desktop
  copy:
    src: git-credential-dev-desktop
    dest: /usr/local/bin/git-credential-dev-desktop
    mode: 0755

- name: Insert the git credential login for everyone
  copy:
    src: templates/gitconfig
    dest: /etc/gitconfig

- name: Create GitHub App configuration directory
  file:
    path: /etc/github-app-credentials
    owner: root
    group: github-app-credentials
    mode: 0750
    state: directory

- name: Copy GitHub App ID
  copy:
    content: "{{ vars_github_app_id }}"
    dest: /etc/github-app-credentials/app_id.txt
    owner: root
    group: github-app-credentials
    mode: 0640

- name: Copy GitHub App private key
  copy:
    content: "{{ vars_github_app_private_key }}"
    dest: /etc/github-app-credentials/app_private_key.pem
    owner: root
    group: github-app-credentials
    mode: 0640

- name: Set up the group for people allowed to ssh into the dev-desktop
  group:
    name: dev-desktop-allow-ssh
    state: present

- name: Upload sudo configuration
  template:
    src: sudoers
    dest: /etc/sudoers.d/dev-desktop
    mode: 0440
